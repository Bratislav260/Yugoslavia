import time

from aiogram import types, Dispatcher
from config import admin, bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import logging


async def welcome_user(message: types.Message):
    for member in message.new_chat_members:
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.full_name}\n\n"
                             f"–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã:\n"
                             f"–ù–µ —Å–ø–∞–º–∏—Ç—å\n"
                             f"–ù–µ —Ç–æ–∫—Å–∏—á–∏—Ç—å")

words = ['–¥—É—Ä–∞–∫', '–∫—Ä–µ—Ç–∏–Ω', '—Ç–∏–ø', '—á–æ—Ä—Ç']
pre = ['1', 'üü© - 1', 'üü® - 2', 'üü• - 3']
users_pre = {}


async def filter_words(message: types.Message): # –¥–æ–±–∞–≤–ª–µ–Ω —Å–ø–æ—Å–æ–± –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª-–≤–æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏
    message.text = message.text.lower()
    for word in words:
        if word in message.text:
            await message.answer(f"–ù–µ —Ä—É–≥–∞–π—Å—è!\n–ü—Ä–∏–¥—É–ø—Ä–∏–∂–¥–∞–µ–º, –ø–æ—Å–ª–µ 3 —Ç—Ä–µ—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–∏ —Ç—ã –±—ã–¥–µ—à—å –∑–∞–±–∞–Ω–µ–Ω! {pre[1]}")
            await check_pre(message)
            if users_pre[message.from_user.id] == 3:
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} "
                                     f"–∑–∞–±–∞–Ω–µ–Ω –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ—Å—Ç–≤–æ!")
            await message.delete()
            break


async def check_pre(message: types.Message): # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª-–≤–æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏
    if message.from_user.id not in users_pre:
        users_pre[message.from_user.id] = 1
    else:
        users_pre[message.from_user.id] += 1


async def delete_user(message: types.Message):
    if message.chat.type != "private":
        if message.from_user.id not in admin:
            await message.answer("–¢—ã –Ω–µ –∞–¥–º–∏–Ω!")
        elif message.reply_to_message:
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        else:
            user_id = message.from_user.id
            user_name = message.from_user.first_name
            await message.answer(f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {user_name}",
                                 reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(
                            f"–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete {user_id}")))
    else:
        await message.answer("–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤ –≥—Ä—É–ø–ø–µ")


async def complete_delete_user(call: types.CallbackQuery):
    user_id = int(call.data.replace("delete_user ", ""))
    try:
        ban_duration = 3600  # 1 —á–∞—Å
        until_date = int(time.time()) + ban_duration # –±–∞–Ω –Ω–∞ –≤—Ä–µ–º—è
        await bot.kick_chat_member(call.message.chat.id, user_id, until_date)
        await bot.unban_chat_member(call.message.chat.id, user_id)
        await call.answer(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!', show_alert=True)
        await bot.delete_messages(call.message.chat.id, call.message_id)
    except Exception as e:
        logging.error(f'Error in complete_delete_user: {e}')
        await call.answer(text='–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', show_alert=True)


def register_admin(dp: Dispatcher):
    dp.register_message_handler(delete_user, commands=["delete"])
    dp.register_message_handler(complete_delete_user,
                                lambda call: call.data and call.data.startwith('delete_user '))
    dp.register_message_handler(filter_words)
    dp.register_message_handler(welcome_user, content_types=[types.ContentType.NEW_CHAT_MEMBERS])
